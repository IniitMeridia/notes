python editer cmd - python3
to exit python, use exit function - exit()
>>> is the repl and can be used to run new code before you insert it into a script to check for syntax or errors
dont forget that to see the output of something in a script, use the print() function


"vim .vimrc" from home directory
input below info to setup vim for coding ease of use:+
syntax enable
set tabstop=4
set shiftwidth=4
set expandtab
set number
filetype indent on
set autoindent


  1 #!/usr/bin/env python3
  2 
  3 print("Hello world!")
  4 print("503")
  5 a = "hello"
  6 print(a)
  7 print(1 + 2)
  8 print(type(3))
  9 

"list you are appending to".append(what you want to add to the end of the list)


list is mutable
tuple is immutable
.format ---- brace expansion

' "string" '.split(where in the string you want to split)  - splits strings defaults on space - makes a list out of the split items

'what you want to join the list with (: ! etc...)'.join (list being joined) 

  1 #!/usr/bin/env python3
  2 
  3 email = 'last@domain.com'
  4 
  5 answer1 = email.split('@')
  6 answer2 = '.'.join(answer1)
  7 answer = answer2.split('.')
  8 print(answer)

email = 'last@domain.com'
blank = []
a = email.split('@')[0]
b = (email.split('@')[1]).split('.')
blank.append(a)
blank.append(b[0])
blank.append(b[1])

print(blank)

'''['last','domain','com']'''

print (('.'.join(email.split('@'))).split('.'))

day 1 review - 
basic data types
basic math
list
tuples - like lists but cant be edited - immutable
list[0]  last is always -1
typecast
functions -print() , type() , 
brace expansion - 
.split
.join
.append
.format - 'one = {}'.format(1) - the 1 in the () will be inserted into the {} - 

DAY 2 

branching

  1 #!/usr/bin/env python3
  2 
  3 user = int(input('Type a Number:'))
  4 
  5 if  (user % 5 == 0) and (user % 3 == 0):
  6     print('fizzbuzz')
  7 elif user%3==0:
  8     print('fizz')
  9 elif user%5==0:
 10     print('buzz')
 11 else:
 12     print(user)
 13 

example
num = 7



if 0 <= num <= 10
  print(num) 

while example
  1 #!/usr/bin/env python3
  2 
  3 while True:
  4         usr = input('Type pass, continue, or break:\n').lower()
  5         if usr == 'pass':
  6             pass
  7             print('This is pass')
  8         elif usr == 'continue':
  9             continue
 10             print('This is continue')
 11         elif usr == 'break':
 12             break
 13             print('This is break')
 14         else:
 15             print('Invalid option')

  1 #!/usr/bin/env python3
  2 
  3 def guess_number(n):
  4     
  5     while True:
  6         guess = int(input('Please guess a number between 1 and 100:\n'))
  7         if guess == n:
  8             print('Win')
  9             break
 10         elif guess > n:
 11             print('Too High')
 12         elif guess < n:
 13             print('Too Low')
 14         else:
 15             print('Invalid Choice')
 16     
 17 
 18 
 19 guess_number(23)
~         

DAY3

len() - length of list
index - 
range() - provides a range from 2 inputs 1,10 = 0-9
ten[] - 0 first - -1 = last
ten[0:10:1] 


IP Validation
def is_valid_IP(strng):
    lst = strng.split('.')
    if strng.count('.') == 3:
        for i in lst:
            if i == []:
                return False
            else:
                if len(i) < 1:
                    return False
                else:
                    if i[0] == '0' and len(i) > 1:
                        return False
                    else:
                        if i.isdigit() == True:
                                f = int(i)
                                if 0 <= f <= 255:
                                    pass
                                else:
                                    return False
                                    break
                        else:
                            return False
                            break
        return True 
    else:
        return False
Unique in Order
def unique_in_order(s):
    lst = s
    if s == () or s == [] or s == '':
        return []
    else:
        first = lst.split()
        for i in first:
            second = []  
            if i in second:
                pass
            else:
                second.append(i)
            return second
