python editer cmd - python3
to exit python, use exit function - exit()
>>> is the repl and can be used to run new code before you insert it into a script to check for syntax or errors
dont forget that to see the output of something in a script, use the print() function


"vim .vimrc" from home directory
input below info to setup vim for coding ease of use:+
syntax enable
set tabstop=4
set shiftwidth=4
set expandtab
set number
filetype indent on
set autoindent


  1 #!/usr/bin/env python3
  2 
  3 print("Hello world!")
  4 print("503")
  5 a = "hello"
  6 print(a)
  7 print(1 + 2)
  8 print(type(3))


"list you are appending to".append(what you want to add to the end of the list)


list is mutable
tuple is immutable
.format ---- brace expansion

' "string" '.split(where in the string you want to split)  - splits strings defaults on space - makes a list out of the split items

'what you want to join the list with (: ! etc...)'.join (list being joined) 

  1 #!/usr/bin/env python3
  2 
  3 email = 'last@domain.com'
  4 
  5 answer1 = email.split('@')
  6 answer2 = '.'.join(answer1)
  7 answer = answer2.split('.')
  8 print(answer)

email = 'last@domain.com'
blank = []
a = email.split('@')[0]
b = (email.split('@')[1]).split('.')
blank.append(a)
blank.append(b[0])
blank.append(b[1])

print(blank)

'''['last','domain','com']'''

print (('.'.join(email.split('@'))).split('.'))

day 1 review - 
basic data types
basic math
list
tuples - like lists but cant be edited - immutable
list[0]  last is always -1
typecast
functions -print() , type() , 
brace expansion - 
.split
.join
.append
.format - 'one = {}'.format(1) - the 1 in the () will be inserted into the {} - 

DAY 2 

branching

  1 #!/usr/bin/env python3
  2 
  3 user = int(input('Type a Number:'))
  4 
  5 if  (user % 5 == 0) and (user % 3 == 0):
  6     print('fizzbuzz')
  7 elif user%3==0:
  8     print('fizz')
  9 elif user%5==0:
 10     print('buzz')
 11 else:
 12     print(user)
 13 

example
num = 7



if 0 <= num <= 10
  print(num) 

while example
  1 #!/usr/bin/env python3
  2 
  3 while True:
  4         usr = input('Type pass, continue, or break:\n').lower()
  5         if usr == 'pass':
  6             pass
  7             print('This is pass')
  8         elif usr == 'continue':
  9             continue
 10             print('This is continue')
 11         elif usr == 'break':
 12             break
 13             print('This is break')
 14         else:
 15             print('Invalid option')

  1 #!/usr/bin/env python3
  2 
  3 def guess_number(n):
  4     
  5     while True:
  6         guess = int(input('Please guess a number between 1 and 100:\n'))
  7         if guess == n:
  8             print('Win')
  9             break
 10         elif guess > n:
 11             print('Too High')
 12         elif guess < n:
 13             print('Too Low')
 14         else:
 15             print('Invalid Choice')
 16     
 17 
 18 
 19 guess_number(23)
~         

DAY3

len() - length of list
index - 
range() - provides a range from 2 inputs 1,10 = 0-9
ten[] - 0 first - -1 = last
ten[0:10:1] 


IP Validation
def is_valid_IP(strng):
    lst = strng.split('.')
    if strng.count('.') == 3:
        for i in lst:
            if i == []:
                return False
            else:
                if len(i) < 1:
                    return False
                else:
                    if i[0] == '0' and len(i) > 1:
                        return False
                    else:
                        if i.isdigit() == True:
                                f = int(i)
                                if 0 <= f <= 255:
                                    pass
                                else:
                                    return False
                                    break
                        else:
                            return False
                            break
        return True 
    else:
        return False
Unique in Order
def unique_in_order(s):
    lst = s
    if s == () or s == [] or s == '':
        return []
    else:
        first = lst.split()
        for i in first:
            second = []  
            if i in second:
                pass
            else:
                second.append(i)
            return second


print(*thing*)
print(type(*thing*))


Practice Exam
  1 #!/usr/bin/env python3
  2 
  3 def q1(floatstr):
  4     '''
  5     TLO: 112-SCRPY002, LSA 3,4
  6     Given the floatstr, which is a comma separated string of
  7     floats, return a list with each of the floats in the 
  8     argument as elements in the list.
  9     '''
 10     lsst=[]
 11     lst = floatstr.split(',')      '''splits the variable string at the commas '''
 12     for i in lst:
 13         lsst.append(float(i))      
 14     return lsst
 15     '''pass
 16     '''
 17 def q2(*args):
 18     '''
 19     TLO: 112-SCRPY006, LSA 3
 20     TLO: 112-SCRPY007, LSA 4
 21     Given the variable length argument list, return the average
 22     of all the arguments as a float
 23     '''
 24     return float((sum(args))/(len(args)))
 25 
 26 def q3(lst,n):
 27     '''
 28     TLO: 112-SCRPY004, LSA 3
 29     Given a list (lst) and a number of items (n), return a new 
 30     list containing the last n entries in lst.
 31     '''
 32     return lst[-n:]      '''this doesnt make sense in my brain, go over slicing'''
 33     pass                 '''32     print(lst)
 34                          '''33     print(n)
 35 def q4(strng):           '''34     print(lst[-n:])
 36     '''
 37     TLO: 112-SCRPY004, LSA 1,2
 38     TLO: 112-SCRPY006, LSA 3
 39     Given an input string, return a list containing the ordinal numbers of 
 40     each character in the string in the order found in the input string.
 41     '''
 42     lst=[]
 43     for i in strng:
 44         lst.append(ord(i))
 45     return lst
 46     pass
 47 
 48 def q5(strng):
 49     '''
 50     TLO: 112-SCRPY002, LSA 1,3
 51     TLO: 112-SCRPY004, LSA 2
 52     Given an input string, return a tuple with each element in the tuple
 53     containing a single word from the input string in order.
 54     '''
 55     lst=strng.split()
 56     return tuple(lst)
 57 
 58     pass
 59 
 60 def q6(catalog, order):
 61     '''
 62     TLO: 112-SCRPY007, LSA 2
 63     Given a dictionary (catalog) whose keys are product names and values are product
 64     prices per unit and a list of tuples (order) of product names and quantities,
 65     compute and return the total value of the order.
 66 
 67     Example catalog:
 68     {
 69         'AMD Ryzen 5 5600X': 289.99,
 70         'Intel Core i9-9900K': 363.50,
 71         'AMD Ryzen 9 5900X': 569.99
 72     }
 73 
 74     Example order:
 75     [
 76         ('AMD Ryzen 5 5600X', 5), 
 77         ('Intel Core i9-9900K', 3)
 78     ]
 79 
 80     Example result:
 81     2540.45 
 82 
 83     How the above result was computed:
 84     (289.99 * 5) + (363.50 * 3)
 85     '''
 86     '''for i in catalog:'''
 87     lst=[]
 88     counter=0
 89     for i in order:
 90         lst.append((catalog[order[counter][0]])*(order[counter][1]))
 91         counter += 1
 92     return sum(lst)
 93 
 94     pass
 95 
 96 def q7(filename):
 97     '''
 98     TLO: 112-SCRPY005, LSA 1
 99     Given a filename, open the file and return the length of the first line 
100     in the file excluding the line terminator.
101     '''
102     with open(filename) as fp:
103         return (len(fp.readline())-1)
104     pass
105 
106 def q8(filename,lst):
107     '''
108     TLO: 112-SCRPY003, LSA 1
109     TLO: 112-SCRPY004, LSA 1,2
110     TLO: 112-SCRPY005, LSA 1
111     Given a filename and a list, write each entry from the list to the file
112     on separate lines until a case-insensitive entry of "stop" is found in 
113     the list. If "stop" is not found in the list, write the entire list to 
114     the file on separate lines.
115     '''
116     with open(filename, 'w') as fp:
117         for i in lst:
118             if i.lower() == 'stop':
119                 break
120             else:
121                 fp.write(i + '\n')
122     pass
123 
124 def q9(miltime):
125     '''
126     TLO: 112-SCRPY003, LSA 1
127     Given the military time in the argument miltime, return a string 
128     containing the greeting of the day.
129     0300-1159 "Good Morning"
130     1200-1559 "Good Afternoon"
131     1600-2059 "Good Evening"
132     2100-0259 "Good Night"
133     '''
134     time = int(miltime)
135     if 300 <= time <= 1159:
136         return 'Good Morning'
137     elif 1200 <= time <= 1559:
138         return 'Good Afternoon'
139     elif 1600 <= time <= 2059:
140         return 'Good Evening'
141     elif 2100 <= time <= 2359:
142         return 'Good Night'
143     elif 0 <= time <= 259:
144         return 'Good Night'
145     pass
146 
147 def q10(numlist):
148     '''
149     TLO: 112-SCRPY003, LSA 1
150     TLO: 112-SCRPY004, LSA 1
151     Given the argument numlist as a list of numbers, return True if all 
152     numbers in the list are NOT negative. If any numbers in the list are
153     negative, return False.
154     '''
155     for i in numlist:
156         if i >= 0:
157             pass
158         else:
159             return False
160             break
161     return True
162 
163     pass

 20     lst = addr.split('.')
 21     if addr.count('.') == 3:
 22         for i in lst:
 23             if i == []:
 24                 return False
 25             else:
 26                 if len(i) < 1:
 27                     return False
 28                 else:
 29                     if i[0] == '0' and len(i) > 1:
 30                         return False
 31                     else:
 32                         if i.isdigit() == True:
 33                                 f = int(i)
 34                                 if 0 <= f <= 255:
 35                                     pass
 36                                 else:
 37                                     return False
 38                                     break
 39                         else:
 40                             return False
 41                             break
 42         return True
 43     else:
 44         return False







TAKING NOTES IN CYBER
finding commands, write out a short blerb about the command and what it does

BASH NOTES
https://linuxhandbook.com/find-exec-command/

time = days
  -minutes or days no hours

find command with exec

egrep/ grep -E

chmod +x- 777 all the time in training
rm
rm -r
rm -rf
rmdir
ls -lisa
.../etc
pwd
mv (source) (destination)
tar -czf - NEED TO KNOW
locate
ps -elf
ps -a
ps -u
ps -u --forest
ps -x 
pkill
kill
killall



find / -type s -exec echo {} 2>/dev/null \ ........



----mkdir {1123,1134,1145,1156}
Brace expansion is a mechanism by which arbitrary strings may be generated, for commands that will take multiple arguements. For the below examples, the first example is equivalent to the second command.

$ mkdir /var/log/{auth,syslog,dmesg}_log

Results in

$ mkdir /var/log/auth_log /var/log/syslog_log /var/log/dmesg_log

Activity: Using Brace-Expansion, create the following directories within the $HOME directory:

    1123
    1134
    1145
    1156

----touch 1123/{1,2,3,4,5,6~,7~,8~,9~}.txt


As we learned, the following example would create five files with one command.

touch file1.txt file2.txt file3.txt passwd.txt shadow.txt

But, with Brace Expansion it can be shortened to the following.

touch file{1..3}.txt passwd.txt shadow.txt

Activity:

Use Brace-Expansion to create the following files within the $HOME/1123 directory. You may need to create the $HOME/1123 directory. Make the following files, but utilze Brace Expansion to make all nine files with one touch command.

Files to create:

    1.txt
    2.txt
    3.txt
    4.txt
    5.txt
    6~.txt
    7~.txt
    8~.txt
    9~.txt


----find ./1123 -type f -name *.txt
----find 1123/*.txt
Using the find command, list all files in $HOME/1123 that end in .txt.

Be aware that if you use Pattern Matching to locate the files you may have unintended results based on if you use quotes around the pattern or not. If you do not quote the pattern, the Bash shell interprets the pattern. If you quote the pattern, it is passed to the command for it to interpret. You can have a properly functioning command, yet unintended output, based on which of these two gets to interpret the pattern.

----find ./1123 -type f -name *.txt | grep -v ~.txt
----find $HOME/1123 -name "*.txt" | grep -v "~"
List all files in $HOME/1123 that end in .txt. Omit the files containing a tilde (~) character.

While this activity can be accomplished with only find, it can also be combined with grep as well.


Copy all files in the $HOME/1123 directory, that end in ".txt", and omit files containing a tilde "~" character, to directory $HOME/CUT.

Use only the find and cp commands. You will need to utilize the -exec option on find to accomplish this activity.

The find command uses BOOLEAN "!" to designate that it does not want to find any files or directories that follows.
----find $HOME/1123 -name *.txt ! -name *~.txt -exec cp {} $HOME/CUT \;

Using ONLY the find command, find all empty files/directories in directory /var and print out ONLY the filename (not absolute path), and the inode number, separated by newlines.

Tip: When using the man pages, it is better to focus your search then to visually scan 1000+ lines of text. Combining the output with the grep command, possibly with its -A, -B, or -C options, can help drive context driven searches of those manual pages.

Example Output

123 file1
456 file2
789 file3
----find /var -empty -printf "%i %f\n"

Using ONLY the find command, find all files on the system with inode 4026532575 and print only the filename to the screen, not the absolute path to the file, separating each filename with a newline. Ensure unneeded output is not visible.

Tip: The above inode is specific to this CTFd question and might not be in use on your Linux Opstation. Instead, you can test your command on your Linux OpStation against inode 999.
----find -iname 4026532575 -printf "%f"



    Using only the ls -l and cut Commands, write a BASH script that shows all filenames with extensions ie: 1.txt, etc., but no directories, in $HOME/CUT.
    Write those to a text file called names in $HOME/CUT directory.
    Omit the names filename from your output.

NOTE: The output should only be the file names with no additional information. Additionally, your code will be executed twice. This is to ensure you have taken into account how file redirection and command execution works.
ls -l $HOME/CUT | cut -d. -f1- -s | cut -d: -f2 | cut -d' ' -f2 > $HOME/CUT/names


DAY 2

tail /etc/passwd > fakepasswd
tail fakepasswd | awk -F: '{print $1}'
                      ^"feed" awk a delimiter, what something is seperated by/ print $1, print the 1st field
                      
awk -F: '{OFS="#"} {print $1,$3}' fakepasswd
                           ^can print more than 1 field in any order
              ^ adds a delimiter between the printed fields instead of 'space' (example example / example#example)
                        
-nF for last field

awk -F: '($3 >= 150){print $1,$6,$3}' fakepasswd
???????




sort = sorts things...
-n = numeric
-u = uniquely
-nr = inverse numeric
-t = field seperator like OFS
-k = columns

sort | uniq = unique??? sometimes have to use instead of -u

sed 
-e = expression for multiple sed patterns
-i = case insensitive
S is substitution start pattern
g (lowercase) is for global 
d (lowercase) deletes
$ means end of line

finds this word / replaces with this word
sed -e 's/chicken/hamburger/g' -e 's/pepperoni/sausage/g' pizza.txt
sed 's/chicken/hamburger/g' pizza.txt
sed '/chicken/d' pizza.txt
sed 's/chicken/hamburger/g' pizza.txt

command substitution
---aliases

A=$(find /usr/bin -name passwd)
echo $A
echo
md5sum $A
echo 
file $A


















