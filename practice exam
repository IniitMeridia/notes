.length look it up for exam
psitem or $_ for elements provided on a pipeline


<# 1 #>
function q1($var1,$var2,$var3,$var4) {
    <# Return the product of the arguments #>
    $var1 * $var2 * $var3 * $var4
}
function q2($arr,$rows,$cols,$key) {
    <# Search the 2 dimensional array for the first occurance of key at column index 0
       and return the value at column index 9 of the same row.
       Return -1 if the key is not found.
    #>
	foreach($i in $arr){
        if($i[0] -eq $key){
            return $i[9]
        }
    }
    return '-1'
}
}
function q3 {
    <# In a loop, prompt the user to enter positive integers one at time.
       Stop when the user enters a -1. Return the maximum positive
       value that was entered."
	#>
    $array = @()
    while($true){
        $number = Read-Host -Prompt "Enter positive number:"
        if($number -gt -1){
            $array += [int]$number
        }
        else{
            break
        }
    }
    $array | Sort-Object -Descending | Select-Object -Index 0
}
####
$val = 0
do {
	$val2 = Read-Host
	if($val2 -gt $val){$val = $val2}
}until($val2 -eq -1)
return $val
####
function q4($filename,$whichline) {
    <# Return the line of text from the file given by the `$filename
	   argument that corresponds to the line number given by `$whichline.
	   The first line in the file corresponds to line number 0."
	#>
    Get-Content $filename | Select-Object -Index $whichline
####
	return (Get-Content $filename)[$whichline]
####
}
function q5($path) {
    <# Return the child items from the given path sorted
       ascending by their Name
	#>
    return Get-ChildItem $path | Sort-Object -Property Name
}
#### - get-childitem sorts in pwd by defualt
function q6 {
    <# Return the sum of all elements provided on the pipeline
	#> 
    begin{$sum = 0}
    process{$sum += $_}
    end{return $sum} 
}
function q7 {
	<# Return only those commands whose noun is process #>
    Get-Command -noun process
}
function q8($adjective) {
    <# Return the string 'PowerShell is ' followed by the adjective given
	   by the `$adjective argument
	#> 
   "Powershell is $adjective"
}
function q9($addr) {
	<# Return `$true when the given argument is a valid IPv4 address,
	   otherwise return `$false. For the purpose of this function, regard
	   addresses where all octets are in the range 0-255 inclusive to
	   be valid.
	#>
    ('8.8.8.555' -split '\.') | ForEach-Object{
    if([int]$oct -lt 0 -or [int]$oct -gt 255){
        $false
        }
    else{$true}
    }
}
####
function IsValidIPv4Address ($ip) {
    return ($ip -match "^\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}$" -and [bool]($ip -as [ipaddress]))
####
}
function q10 ($filepath,$lasthash) {
    <# Return `$true if the contents of the file given in the
       `$filepath argument have changed since `$lasthash was
       computed. `$lasthash is the previously computed SHA256
       hash (as a string) of the contents of the file. #>
       (Get-FileHash $filepath).hash -notmatch $lasthash
       
       
       #...run hash of the filepath
       #...$filepath == $lasthash
}
