filter traffic


Network Traffic Filtering Concepts
    Protocols Operation
    Header Analysis
    Network Reconnaissance
    Tunnel Analysis
    IOA and IOC
    Malware Analysis

Defense in Depth
    Perimeter Security
    Network Security
    Endpoint Security
    Application and OS Security
    Data Security

Block-Listing vs Allow-Listing

    Block-Listing (Formerly Black-List)
        Implicit ACCEPT
        Explicit DENY

    Allow-Listing (Formerly White-List)
        Implicit DENY
        Explicit ACCEPT


devices          Filtering mechanisms         operates at OSI layer

switch            PACL & VACL                 LAYER 2
                  ACL                         LAYER 3

router            ACL                         LAYER 3 & 4

proxies           Content based such as:
                URL & DNS blacklists          LAYER 3-7
                MIME filtering                
                content keyword filtering 

Intrusion
Detection &       signatures                  Layer 3-7
Prevention
Systems

host based
firewall          rules                       Layer 3-7

network           rules
firewall        packet filtering(stateless)   Layer 3 & 4
                stateful(connection based)    Layer 3 & 4
                application layer FW          Layer 3-7
                next generation FW            Layer 3-7


Traffic Directions

    A to B
        Traffic originating from the localhost to the remote-host
            You (the client) are the client sending traffic to the server.
        Return traffic from that remote-host back to the localhost.
            The server is responding back to you (the client).

    B to A
        Traffic originating from the remote-host to the localhost.
            A client is trying to connect to you (the server)
        Return traffic from the localhost back to the remote-host.
            You (the server) are responding back to the client.

Host based filtering 
    Windows - Norton, Mcafee, ZoneAlarm, Avast, etc.
    Linux - iptables, nftables, UFW, firewalld.
    MAC - Little Snitch, LuLu, Vallum, etc.

Netfilter framework

Made to provide:
    packet filtering
    stateless/stateful Firewalls
    network address and port translation (NAT and PAT)
    other packet manipulation


!!!!Netfilter hooks - > Chain

    NF_IP_PRE_ROUTING → PREROUTING

    NF_IP_LOCAL_IN → INPUT

    NF_IP_FORWARD → FORWARD

    NF_IP_LOCAL_OUT → OUTPUT

    NF_IP_POST_ROUTING → POSTROUTING


Netfilter paradigm

    tables - contain chains
    chains - contain rules
    rules - dictate what to match and what actions to perform on packets when packets match a rule

iptables - ipv4 packet administration

  filter - default table. Provides packet filtering.
  nat - used to translate private ←→ public address and ports.
  mangle - provides special packet alteration. Can modify various fields header fields.
  raw - used to configure exemptions from connection tracking.
  raw - used to configure exemptions from connection tracking.

    PREROUTING - packets entering NIC before routing
    INPUT - packets to localhost after routing
    FORWARD - packets routed from one NIC to another. (needs to be enabled)
    OUTPUT - packets from localhost to be routed
    POSTROUTING - packets leaving system after routing

  filter - INPUT, FORWARD, and OUTPUT
  nat - PREROUTING, POSTROUTING, INPUT, and OUTPUT
  mangle - All chains
  raw - PREROUTING and OUTPUT
  security - INPUT, FORWARD, and OUTPUT

Netfilter created several (separate) applications to filter on different layer 2 or layer 3+ protocols.

    iptables - IPv4 packet administration

    ip6tables - IPv6 packet administration

    ebtables - Ethernet Bridge frame table administration

    arptables - arp packet administration

Chains assigned to each Table

    filter - INPUT, FORWARD, and OUTPUT

    nat - PREROUTING, POSTROUTING, INPUT, and OUTPUT

    mangle - All chains

    raw - PREROUTING and OUTPUT

    security - INPUT, FORWARD, and OUTPUT


Common iptable options
-t - Specifies the table. (Default is filter)
-A - Appends a rule to the end of the list or below specified rule
-I - Inserts the rule at the top of the list or above specified rule
-R - Replaces a rule at the specified rule number
-D - Deletes a rule at the specified rule number
-F - Flushes the rules in the selected chain
-L - Lists the rules in the selected chain using standard formatting
-S - Lists the rules in the selected chain without standard formatting
-P - Sets the default policy for the selected chain
-n - Disables inverse lookups when listing rules
--line-numbers - Prints the rule number when listing rules
-p - Specifies the protocol
-i - Specifies the input interface
-o - Specifies the output interface
--sport - Specifies the source port
--dport - Specifies the destination port
-s - Specifies the source IP
-d - Specifies the destination IP
-j - Specifies the jump target action
-i [ iface ]
-o [ iface ]
-s [ ip.add | network/CIDR ]
-d [ ip.add | network/CIDR ]

    -m to enable iptables extensions:
-m state --state NEW,ESTABLISHED,RELATED,UNTRACKED,INVALID
-m mac [ --mac-source | --mac-destination ] [mac]
-p [tcp|udp] -m multiport [ --dports | --sports | --ports { port1 | port1:port15 } ]
-m bpf --bytecode [ 'bytecode' ]
-m iprange [ --src-range | --dst-range { ip1-ip2 } ]

iptables syntax

  iptables -t [table] -A [chain] [rules] -j [action]
    Table: filter*, nat, mangle
    Chain: INPUT, OUTPUT, PREROUTING, POSTROUTING, FORWARD


practice
sudo iptables



sudo iptables-save > ctccscript.conf -v
sudo iptables-restore < ctccscript.conf -v


nftable

filter
route
nat

1.Create the Table

nft add table [family] [table]
    [family] = ip*, ip6, inet, arp, bridge and netdev.
    [table] = user provided name for the table.

2.Create the Base Chain

nft add chain [family] [table] [chain] { type [type] hook [hook]
    priority [priority] \; policy [policy] \;}
* [chain] = User defined name for the chain.
* [type] =  can be filter, route or nat.
* [hook] = prerouting, ingress, input, forward, output or
           postrouting.
* [priority] = user provided integer. Lower number = higher
             priority. default = 0. Use "--" before
             negative numbers.
* ; [policy] ; = set policy for the chain. Can be
              accept (default) or drop.
 Use "\" to escape the ";" in bash

Rule Match options
 ip [ saddr | daddr { ip | ip1-ip2 | ip/CIDR | ip1, ip2, ip3 } ]
 tcp flags { syn, ack, psh, rst, fin } 
 tcp [ sport | dport { port1 | port1-port2 | port1, port2, port3 } ]
 udp [ sport| dport { port1 | port1-port2 | port1, port2, port3 } ]
 icmp [ type | code { type# | code# } ]

Rule Match options
 ct state { new, established, related, invalid, untracked }    connection state
 iif [iface]                                                   inbound int   
 oif [iface]                                                   outbound int

Modify NFTables

 nft { list | flush } ruleset
 nft { delete | list | flush } table [family] [table]
 nft { delete | list | flush } chain [family] [table] [chain]

sudo nft list table CLASS_ALPHA > nfttables.rule
sudo nft 



